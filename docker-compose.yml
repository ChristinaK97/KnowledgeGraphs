version: '3.9'
services:
  python-environment:
    build:
      context: ./PythonEnvironment
      args:
        - TORCH_VERSION=${TORCH_VERSION}
        - TORCHAUDIO_VERSION=${TORCHAUDIO_VERSION}
        - TORCHVISION_VERSION=${TORCHVISION_VERSION}
        - CUDA_VERSION=${CUDA_VERSION}
    image: encryptdev/python-environment:1.0.0
    container_name: python-environment
    networks:
      - encrypt-network

  knowledge-graphs-python:
    build:
      context: ./KnowledgeGraphsPython
    depends_on:
      - python-environment
    image: encryptdev/knowledge-graphs-python:1.0.0
    container_name: knowledge-graphs-python
    restart: always
    ports:
      - "7531:7531"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    networks:
      - encrypt-network
    volumes:
      # bind mount a local directory for access to kg data and persistent storage :
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
      # or migrate an external volume :
      #- knowledge-graphs-data:/KnowledgeGraphsApp/data


  knowledge-graphs-main:
    build:
      context: ./KnowledgeGraphsJava
    depends_on:
      - knowledge-graphs-python
      - graphdb
      - preprocessing-tool
    image: encryptdev/knowledge-graphs-main:1.0.0
    container_name: knowledge-graphs-main
    restart: always
    ports:
      - "7530:7530"
    environment:
      PRODUCER_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      PIIS_KAFKA_TOPIC: ${PIIS_KAFKA_TOPIC}
      KG_PRODUCER_ID: ${KG_PRODUCER_ID}
    networks:
      - encrypt-network
    volumes:
      # bind mount a local directory for access to kg data and persistent storage :
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
      # or migrate an external volume :
      #- knowledge-graphs-data:/KnowledgeGraphsApp/data


  graphdb:
    image: ontotext/graphdb:10.4.0
    container_name: graphdb
    restart: always
    environment:
      - GRAPHDB_HOME=/opt/graphdb/home
    ports:
      - "7200:7200"
      - "7300:7300"
    volumes:
      - encrypt-graphdb-data:/opt/graphdb/home/data
    networks:
      - encrypt-network


# -------------------------------------------------------------------------

  # TODO: for testing
  preprocessing-tool:
    build:
      context: ./PreprocessingDummyAPI
    image: preprocessing-tool:latest
    container_name: preprocessing-tool
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - encrypt-network


# -------------------------------------------------------------------------


# an external volume needs to be created/defined "docker volume create graphdb_data"
volumes:
  encrypt-graphdb-data:
    name: encrypt-graphdb-data
    #external: true
  #encrypt-knowledge-graphs-data:
  #  name: knowledge-graphs-data
  #  external: true


networks:
  encrypt-network:
    name: encrypt-network
    external: true
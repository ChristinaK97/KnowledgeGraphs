version: '3.9'
services:
  python-environment:
    build:
      context: ./PythonEnvironment
      args:
        - TORCH_VERSION=${TORCH_VERSION}
        - TORCHAUDIO_VERSION=${TORCHAUDIO_VERSION}
        - TORCHVISION_VERSION=${TORCHVISION_VERSION}
        - CUDA_VERSION=${CUDA_VERSION}
    image: python-environment:latest
    container_name: python-environment
    networks:
      - encrypt-network

  knowledge-graphs-python:
    build:
      context: ./KnowledgeGraphsPython
    depends_on:
      - python-environment
    image: knowledge-graphs-python:latest
    container_name: knowledge-graphs-python
    restart: always
    ports:
      - "7531:7531"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    volumes:
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
    networks:
      - encrypt-network


  knowledge-graphs-main:
    build:
      context: ./KnowledgeGraphsJava
    depends_on:
      - knowledge-graphs-python
      - graphdb
      - kafka
      - preprocessing-tool
    image: knowledge-graphs-main:latest
    container_name: knowledge-graphs-main
    restart: always
    ports:
      - "7530:7530"
    environment:
      # PRODUCER_BOOTSTRAP_SERVERS: "kafka:9092"
      # KAFKA_TOPIC: "piisTopic"
      PRODUCER_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KG_PRODUCER_ID: ${KG_PRODUCER_ID}
    volumes:
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
    networks:
      - encrypt-network


  graphdb:
    image: ontotext/graphdb:10.4.0
    container_name: graphdb
    restart: always
    environment:
      - GRAPHDB_HOME=/opt/graphdb/home
    ports:
      - "7200:7200"
      - "7300:7300"
    volumes:
      - graphdb-data:/opt/graphdb/home/data
    networks:
      - encrypt-network


# -------------------------------------------------------------------------
  # TODO: for testing
  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - encrypt-network

  # TODO: for testing
  kafka:
    image: confluentinc/cp-kafka
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    networks:
      - encrypt-network

  # TODO: for testing
  preprocessing-tool:
    build:
      context: ./PreprocessingDummy
    image: preprocessing-tool:latest
    container_name: preprocessing-tool
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - encrypt-network
# -------------------------------------------------------------------------



# an external volume needs to be created/defined "docker volume create graphdb_data"
volumes:
  graphdb-data:
    name: graphdb-data
    external: true


networks:
  encrypt-network:
    name: encrypt-network
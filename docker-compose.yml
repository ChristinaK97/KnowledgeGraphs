version: '3.9'
services:
  python-environment:
    build:
      context: ./PythonEnvironment
      args:
        - TORCH_VERSION=${TORCH_VERSION}
        - TORCHAUDIO_VERSION=${TORCHAUDIO_VERSION}
        - TORCHVISION_VERSION=${TORCHVISION_VERSION}
        - CUDA_VERSION=${CUDA_VERSION}
    image: python-environment:latest
    container_name: python-environment
    networks:
      - encrypt-network

  knowledge-graphs-python:
    build:
      context: ./KnowledgeGraphsPython
    depends_on:
      - python-environment
    image: knowledge-graphs-python:latest
    container_name: knowledge-graphs-python
    restart: always
    ports:
      - "7531:7531"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [ gpu ]
    networks:
      - encrypt-network
    volumes:
      # bind mount a local directory for access to kg data and persistent storage :
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
      # or migrate an external volume :
      #- knowledge-graphs-data:/KnowledgeGraphsApp/data


  knowledge-graphs-main:
    build:
      context: ./KnowledgeGraphsJava
    depends_on:
      - knowledge-graphs-python
      - graphdb
      # - kafka
      - preprocessing-tool
    image: knowledge-graphs-main:latest
    container_name: knowledge-graphs-main
    restart: always
    ports:
      - "7530:7530"
    environment:
      PRODUCER_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      PIIS_KAFKA_TOPIC: ${PIIS_KAFKA_TOPIC}
      KG_PRODUCER_ID: ${KG_PRODUCER_ID}
    networks:
      - encrypt-network
    volumes:
      # bind mount a local directory for access to kg data and persistent storage :
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
      # or migrate an external volume :
      #- knowledge-graphs-data:/KnowledgeGraphsApp/data


  graphdb:
    image: ontotext/graphdb:10.4.0
    container_name: graphdb
    restart: always
    environment:
      - GRAPHDB_HOME=/opt/graphdb/home
    ports:
      - "7200:7200"
      - "7300:7300"
    volumes:
      - encrypt-graphdb-data:/opt/graphdb/home/data
    networks:
      - encrypt-network


# -------------------------------------------------------------------------

  # TODO: for testing
  preprocessing-tool:
    build:
      context: ./encrypt-project-master/PreprocessingDummy
    image: preprocessing-tool:latest
    container_name: preprocessing-tool
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - encrypt-network


  ## TODO: for testing
  #zookeeper:
  #  # https://hub.docker.com/r/confluentinc/cp-zookeeper
  #  image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
  #  container_name: zookeeper
  #  hostname: zookeeper
  #  restart: always
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
  #  volumes:
  #    - encrypt-zookeeper-data:/var/lib/zookeeper/data
  #    - encrypt-zookeeper-log-data:/var/lib/zookeeper/log
  #  networks:
  #    - encrypt-network
  #  ports:
  #    - ${ZOOKEEPER_PORT}:${ZOOKEEPER_EXPOSED_PORT}
  #
  ## TODO: for testing
  #kafka:
  #  image: confluentinc/cp-kafka:${KAFKA_VERSION}
  #  container_name: kafka
  #  hostname: kafka
  #  environment:
  #    KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
  #    KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
  #    KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
  #    KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #  depends_on:
  #    - zookeeper
  #  restart: always
  #  volumes:
  #    - encrypt-kafka-data:/var/lib/kafka/data
  #    #- ./certs:/etc/kafka/secrets/
  #  networks:
  #    - encrypt-network
  #  ports:
  #    - ${KAFKA_OUTSIDE_PORT}:${KAFKA_OUTSIDE_PORT}
  ##END OF KAFKA SETUP


  ## TODO: for testing
  #api_node:
  #  build:
  #    context: ./encrypt-project-master/API_node
  #  image: api_node:0.5
  #  container_name: api_node
  #  hostname: api_node
  #  depends_on:
  #    - mongodb
  #    - kafka
  #  restart: always
  #  environment:
  #    MONGO_HOSTNAME:
  #    KAFKA_SERVER:
  #    PYTHONUNBUFFERED: 1
  #  networks:
  #    - encrypt-network
  #  ports:
  #    - 9000:9000
  #    - 9001:9001
  #
  ## TODO: for testing
  #mongodb:
  #  image: mongo:4.0.4
  #  container_name: mongodb
  #  hostname: mongodb
  #  restart: always
  #  volumes:
  #    - encrypt_mongo_data:/data/db
  #  networks:
  #    - encrypt-network
  #  ports:
  #    - 27017:27017
  #
# -------------------------------------------------------------------------


# an external volume needs to be created/defined "docker volume create graphdb_data"
volumes:
  #encrypt_mongo_data:
  #  name: encrypt_mongo_data
  #  #external: true
  #encrypt-kafka-data:
  #  name: encrypt-kafka-data
  #  #external: true
  #encrypt-zookeeper-data:
  #  name: encrypt-zookeeper-data
  #  #external: true
  #encrypt-zookeeper-log-data:
  #  name: encrypt-zookeeper-log-data
  #  #external: true

  encrypt-graphdb-data:
    name: encrypt-graphdb-data
    #external: true
  #encrypt-knowledge-graphs-data:
  #  name: knowledge-graphs-data
  #  external: true


networks:
  encrypt-network:
    name: encrypt-network
    external: true
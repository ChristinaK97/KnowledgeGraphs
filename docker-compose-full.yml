version: '3.9'

services:

#  knowledge-graphs-python:
#    image: encryptdev/knowledge-graphs-python:1.0.0
#    container_name: knowledge-graphs-python
#    restart: always
#    ports:
#      - "7531:7531"
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [ gpu ]
#    networks:
#      - encrypt-network
#    volumes:
#      # bind mount a local directory for access to kg data and persistent storage :
#      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
#      # or migrate an external volume :
#      #- encrypt-knowledge-graphs-data:/KnowledgeGraphsApp/data

  knowledge-graphs-main:
    image: encryptdev/knowledge-graphs-main:1.0.0
    container_name: knowledge-graphs-main
    depends_on:
#      - knowledge-graphs-python
#      - graphdb
      - preprocessing-tool
    restart: always
    ports:
      - "7530:7530"
    environment:
      PRODUCER_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      PIIS_KAFKA_TOPIC: ${PIIS_KAFKA_TOPIC}
      KG_PRODUCER_ID: ${KG_PRODUCER_ID}
    networks:
      - encrypt-network
    volumes:
      # bind mount a local directory for access to kg data and persistent storage :
      - ${KNOWLEDGE_GRAPHS_DATA_PATH}:/KnowledgeGraphsApp/data
      # or migrate an external volume :
      #- encrypt-knowledge-graphs-data:/KnowledgeGraphsApp/data


#  graphdb:
#    image: ontotext/graphdb:10.4.0
#    container_name: graphdb
#    restart: always
#    environment:
#      - GRAPHDB_HOME=/opt/graphdb/home
#    ports:
#      - "7200:7200"
#      - "7300:7300"
#    volumes:
#      - encrypt-graphdb-data:/opt/graphdb/home/data
#    networks:
#      - encrypt-network




  # REST API node
  api_node:
    image: encryptdev/api_node:0.6
    container_name: api_node
    hostname: api_node
    depends_on:
      - mongodb
      - kafka
    restart: always
    environment:
      MONGO_HOSTNAME:
      KAFKA_SERVER:
      PYTHONUNBUFFERED: 1
    networks:
      - encrypt-network
    ports:
      - 9000:9000
      - 9001:9001


  # MongoDB database
  mongodb:
    image: mongo:4.0.4
    container_name: mongodb
    hostname: mongodb
    restart: always
    volumes:
      - encrypt_mongo_data:/data/db
    networks:
      - encrypt-network
    ports:
      - 27017:27017


  #KAFKA cluster
  zookeeper:
    # https://hub.docker.com/r/confluentinc/cp-zookeeper
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    volumes:
      - encrypt-zookeeper-data:/var/lib/zookeeper/data
      - encrypt-zookeeper-log-data:/var/lib/zookeeper/log
    networks:
      - encrypt-network
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_EXPOSED_PORT}

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: always
    volumes:
      - encrypt-kafka-data:/var/lib/kafka/data
      #- ./certs:/etc/kafka/secrets/
    networks:
      - encrypt-network
    ports:
      - ${KAFKA_OUTSIDE_PORT}:${KAFKA_OUTSIDE_PORT}
  #END OF KAFKA SETUP


  #rec-eng:
  #  image:  encryptdev/rec-eng:v3
  #  container_name: Rec-Eng
  #  environment:
  #    INPUT_TOPIC_NAME:
  #    INPUT_GROUP_NAME:
  #    OUTPUT_TOPIC_NAME:
  #    SERVER:
  #  depends_on:
  #    kafka:
  #      condition: service_healthy
  #  restart: always
  #  networks:
  #    - encrypt-network


  # ENCRYPT UI
  encrypt-ui:
    image: encryptdev/encrypt-ui:0.5
    container_name: encrypt-ui
    restart: always
    ports:
      - "80:80"
    networks:
      - encrypt-network

      # PREPROCESSING TOOL
  preprocessing-tool:
    image: encryptdev/encrypt-preprocessing:0.5
    container_name: preprocessing_tool
    restart: always
    ports:
      - "5000:5000"
    env_file:
      - .env
    networks:
      - encrypt-network

  redis:
    container_name: celery-task-queue
    image: redis:7.2.3
    networks:
      - encrypt-network

volumes:
  encrypt_mongo_data:
    name: encrypt_mongo_data
  encrypt-kafka-data:
    name: encrypt-kafka-data
  encrypt-zookeeper-data:
    name: encrypt-zookeeper-data
  encrypt-zookeeper-log-data:
    name: encrypt-zookeeper-log-data
  encrypt-graphdb-data:
    name: encrypt-graphdb-data
  #encrypt-knowledge-graphs-data:
  #  name: encrypt-knowledge-graphs-data
  #  external: true

networks:
  encrypt-network:
    name: encrypt-network
    external: true